{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tommo\\\\Documents\\\\leaderboard gw\\\\src\\\\TwitchPolls.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Option(text, percentage) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"choice\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"option\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"percentage\",\n      children: [isNaN(percentage) ? 0 : percentage, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n_c = Option;\nfunction TwitchPolls() {\n  _s();\n  const [bearerToken, setBearerToken] = useState('vm40p83fxge7q1hsk2ryhpzinj4urh');\n  const [refreshToken, setRefreshToken] = useState('je5uosxlr4i5uzkneb6n4sgibo8xff013xnovlm8elcnua8mmg');\n  const [latestPoll, setLatestPoll] = useState(null);\n  const [totalVotes, setTotalVotes] = useState(0);\n  useEffect(() => {\n    function fetch_refreshToken() {\n      return fetch('https://id.twitch.tv/oauth2/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          'client_id': '7i09su5ewv0dxn00b7vzbt26c6k9ao',\n          'client_secret': 'fybsunr9t8n299wwqx2wgzy1rt051p',\n          'grant_type': 'refresh_token',\n          'refresh_token': refreshToken\n        })\n      }).then(response => response.json()).then(data => {\n        if (data.access_token) {\n          setBearerToken(data.access_token);\n          return data.access_token;\n        } else {\n          throw new Error('Failed to refresh token');\n        }\n      });\n    }\n    fetch_refreshToken();\n    function fecth_polls(bearerToken) {\n      fetch('https://api.twitch.tv/helix/polls?broadcaster_id=28651505', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${bearerToken}`,\n          'Client-Id': '7i09su5ewv0dxn00b7vzbt26c6k9ao'\n        }\n      }).then(response => {\n        if (response.status === 401) {\n          return fetch_refreshToken().then(token => {\n            return fecth_polls(token);\n          });\n        }\n        return response.json();\n      }).then(data => {\n        console.log(bearerToken);\n        if (data) {\n          if (data.data) {\n            setLatestPoll(data.data[0]);\n            const totalVotes = data.data[0].choices.reduce((accumulator, currentChoice) => {\n              return accumulator + currentChoice.votes;\n            }, 0);\n            setTotalVotes(totalVotes);\n          }\n        }\n      });\n    }\n    const interval_id = setInterval(() => {\n      fecth_polls(bearerToken);\n    }, 1000);\n    return () => clearInterval(interval_id);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"twitch_polls\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: latestPoll && latestPoll.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"choices\",\n        children: latestPoll && latestPoll.choices.map(choices => Option(choices.title, choices.votes / totalVotes * 100))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n_s(TwitchPolls, \"jZDIp7lWiaA4zqIs/H7dOVuNvaA=\");\n_c2 = TwitchPolls;\nexport default TwitchPolls;\nvar _c, _c2;\n$RefreshReg$(_c, \"Option\");\n$RefreshReg$(_c2, \"TwitchPolls\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Option","text","percentage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isNaN","_c","TwitchPolls","_s","bearerToken","setBearerToken","refreshToken","setRefreshToken","latestPoll","setLatestPoll","totalVotes","setTotalVotes","fetch_refreshToken","fetch","method","headers","body","URLSearchParams","then","response","json","data","access_token","Error","fecth_polls","status","token","console","log","choices","reduce","accumulator","currentChoice","votes","interval_id","setInterval","clearInterval","title","map","_c2","$RefreshReg$"],"sources":["C:/Users/tommo/Documents/leaderboard gw/src/TwitchPolls.js"],"sourcesContent":["import './App.css';\r\nimport React, {useState, useEffect} from \"react\"\r\n\r\nfunction Option(text, percentage){\r\n    return (\r\n        <div className='choice'>\r\n            <div className='option'>{text}</div>\r\n            <div className='percentage'>{isNaN(percentage) ? 0 : percentage}%</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction TwitchPolls(){\r\n\r\n    const [bearerToken, setBearerToken] = useState('vm40p83fxge7q1hsk2ryhpzinj4urh');\r\n    const [refreshToken, setRefreshToken] = useState('je5uosxlr4i5uzkneb6n4sgibo8xff013xnovlm8elcnua8mmg')\r\n    const [latestPoll, setLatestPoll] = useState(null)\r\n    const [totalVotes, setTotalVotes] = useState(0)\r\n\r\n    useEffect(() =>{\r\n\r\n        function fetch_refreshToken(){\r\n\r\n            return fetch('https://id.twitch.tv/oauth2/token', {\r\n                method: 'POST', \r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded'\r\n                },\r\n                body: new URLSearchParams({\r\n                    'client_id': '7i09su5ewv0dxn00b7vzbt26c6k9ao',\r\n                    'client_secret': 'fybsunr9t8n299wwqx2wgzy1rt051p',\r\n                    'grant_type': 'refresh_token',\r\n                    'refresh_token': refreshToken\r\n                })\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.access_token) {\r\n                    setBearerToken(data.access_token);\r\n                    return data.access_token;\r\n                } else {\r\n                    throw new Error('Failed to refresh token');\r\n                }\r\n            })\r\n        }\r\n\r\n        fetch_refreshToken()\r\n\r\n        function fecth_polls(bearerToken){\r\n\r\n            fetch('https://api.twitch.tv/helix/polls?broadcaster_id=28651505', {\r\n                method: 'GET', \r\n                headers: {\r\n                    'Authorization': `Bearer ${bearerToken}`, \r\n                    'Client-Id': '7i09su5ewv0dxn00b7vzbt26c6k9ao', \r\n                }\r\n            })\r\n            .then(response => {\r\n                if(response.status === 401){\r\n                    return fetch_refreshToken().then(token => {return fecth_polls(token)})\r\n                }\r\n                return response.json()\r\n            })\r\n            .then(data =>{\r\n                console.log(bearerToken)\r\n                if(data){\r\n                \r\n                    if(data.data){\r\n                        setLatestPoll(data.data[0])\r\n                        const totalVotes = data.data[0].choices.reduce((accumulator, currentChoice) => {\r\n                            return accumulator + currentChoice.votes;\r\n                        }, 0);\r\n                        setTotalVotes(totalVotes)\r\n                    }\r\n                }\r\n            })\r\n\r\n\r\n        }\r\n\r\n        const interval_id = setInterval(() => {fecth_polls(bearerToken)}, 1000)\r\n        return () => clearInterval(interval_id)\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className='twitch_polls'>\r\n            <div className='container'>\r\n                <div className='question'>{latestPoll && latestPoll.title}</div>\r\n                <div className='choices'>\r\n                    {latestPoll && latestPoll.choices.map(choices => Option(choices.title, choices.votes/totalVotes*100) )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TwitchPolls"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,MAAMA,CAACC,IAAI,EAAEC,UAAU,EAAC;EAC7B,oBACIH,OAAA;IAAKI,SAAS,EAAC,QAAQ;IAAAC,QAAA,gBACnBL,OAAA;MAAKI,SAAS,EAAC,QAAQ;MAAAC,QAAA,EAAEH;IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACpCT,OAAA;MAAKI,SAAS,EAAC,YAAY;MAAAC,QAAA,GAAEK,KAAK,CAACP,UAAU,CAAC,GAAG,CAAC,GAAGA,UAAU,EAAC,GAAC;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtE,CAAC;AAEd;AAACE,EAAA,GAPQV,MAAM;AASf,SAASW,WAAWA,CAAA,EAAE;EAAAC,EAAA;EAElB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,gCAAgC,CAAC;EAChF,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAC,oDAAoD,CAAC;EACtG,MAAM,CAACqB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACuB,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;EAE/CC,SAAS,CAAC,MAAK;IAEX,SAASwB,kBAAkBA,CAAA,EAAE;MAEzB,OAAOC,KAAK,CAAC,mCAAmC,EAAE;QAC9CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAE,IAAIC,eAAe,CAAC;UACtB,WAAW,EAAE,gCAAgC;UAC7C,eAAe,EAAE,gCAAgC;UACjD,YAAY,EAAE,eAAe;UAC7B,eAAe,EAAEX;QACrB,CAAC;MACL,CAAC,CAAC,CACDY,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;QACV,IAAIA,IAAI,CAACC,YAAY,EAAE;UACnBjB,cAAc,CAACgB,IAAI,CAACC,YAAY,CAAC;UACjC,OAAOD,IAAI,CAACC,YAAY;QAC5B,CAAC,MAAM;UACH,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;QAC9C;MACJ,CAAC,CAAC;IACN;IAEAX,kBAAkB,CAAC,CAAC;IAEpB,SAASY,WAAWA,CAACpB,WAAW,EAAC;MAE7BS,KAAK,CAAC,2DAA2D,EAAE;QAC/DC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,eAAe,EAAE,UAAUX,WAAW,EAAE;UACxC,WAAW,EAAE;QACjB;MACJ,CAAC,CAAC,CACDc,IAAI,CAACC,QAAQ,IAAI;QACd,IAAGA,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAC;UACvB,OAAOb,kBAAkB,CAAC,CAAC,CAACM,IAAI,CAACQ,KAAK,IAAI;YAAC,OAAOF,WAAW,CAACE,KAAK,CAAC;UAAA,CAAC,CAAC;QAC1E;QACA,OAAOP,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDF,IAAI,CAACG,IAAI,IAAG;QACTM,OAAO,CAACC,GAAG,CAACxB,WAAW,CAAC;QACxB,IAAGiB,IAAI,EAAC;UAEJ,IAAGA,IAAI,CAACA,IAAI,EAAC;YACTZ,aAAa,CAACY,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAMX,UAAU,GAAGW,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACQ,OAAO,CAACC,MAAM,CAAC,CAACC,WAAW,EAAEC,aAAa,KAAK;cAC3E,OAAOD,WAAW,GAAGC,aAAa,CAACC,KAAK;YAC5C,CAAC,EAAE,CAAC,CAAC;YACLtB,aAAa,CAACD,UAAU,CAAC;UAC7B;QACJ;MACJ,CAAC,CAAC;IAGN;IAEA,MAAMwB,WAAW,GAAGC,WAAW,CAAC,MAAM;MAACX,WAAW,CAACpB,WAAW,CAAC;IAAA,CAAC,EAAE,IAAI,CAAC;IACvE,OAAO,MAAMgC,aAAa,CAACF,WAAW,CAAC;EAE3C,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI5C,OAAA;IAAKI,SAAS,EAAC,cAAc;IAAAC,QAAA,eACzBL,OAAA;MAAKI,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACtBL,OAAA;QAAKI,SAAS,EAAC,UAAU;QAAAC,QAAA,EAAEa,UAAU,IAAIA,UAAU,CAAC6B;MAAK;QAAAzC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAChET,OAAA;QAAKI,SAAS,EAAC,SAAS;QAAAC,QAAA,EACnBa,UAAU,IAAIA,UAAU,CAACqB,OAAO,CAACS,GAAG,CAACT,OAAO,IAAItC,MAAM,CAACsC,OAAO,CAACQ,KAAK,EAAER,OAAO,CAACI,KAAK,GAACvB,UAAU,GAAC,GAAG,CAAE;MAAC;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACI,EAAA,CAnFQD,WAAW;AAAAqC,GAAA,GAAXrC,WAAW;AAqFpB,eAAeA,WAAW;AAAA,IAAAD,EAAA,EAAAsC,GAAA;AAAAC,YAAA,CAAAvC,EAAA;AAAAuC,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}