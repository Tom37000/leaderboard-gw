{"ast":null,"code":"import'./LeaderboardGameward-fortniteapi.io.css';import React,{useState,useEffect,useRef}from\"react\";import{useLocation}from'react-router-dom';import noeImage from'./noe.png';import iceeImage from'./icee.png';import laynImage from'./layn.png';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function LeaderboardGamewardFortniteApi(){const eventId=new URLSearchParams(useLocation().search).get('eventId');const API_KEY=process.env.REACT_APP_FORTNITE_API_KEY;const playerConfigs=[{epic_id:\"70a8b05d217d47a381e9137b9a0dce51\",display_player_name:\"Icee\",avatar_image:iceeImage},{epic_id:\"31d45164d7cc4c96bef16da56c2b5f8c\",display_player_name:\"Noé\",avatar_image:noeImage},{epic_id:\"3ed9da5cff0948c98196c803412d6321\",display_player_name:\"Layn\",avatar_image:laynImage}];const[playersData,setPlayersData]=useState([null,null,null]);const[error,setError]=useState(null);const previousDataRef=useRef([null,null,null]);const hasDataChanged=(newData,oldData,index)=>{if(!newData&&!oldData)return false;if(!newData||!oldData)return true;return newData.rank!==oldData.rank||newData.points!==oldData.points||newData.games!==oldData.games;};const updatePlayerDataIfChanged=(newPlayerData,index)=>{if(hasDataChanged(newPlayerData,previousDataRef.current[index],index)){setPlayersData(prevData=>{const updatedData=[...prevData];updatedData[index]=newPlayerData;return updatedData;});previousDataRef.current[index]=newPlayerData;console.log(`Données mises à jour pour ${newPlayerData.playerName}:`,newPlayerData);}else{console.log(`Aucun changement pour ${newPlayerData.playerName}`);}};useEffect(()=>{const loadPlayersData=async()=>{console.log('Chargement des données pour eventId:',eventId);console.log('Configuration des joueurs:',playerConfigs);try{const foundPlayers=new Array(playerConfigs.length).fill(null);const searchAllPages=async()=>{let page=0;let totalPages=1;let playersFound=0;while(page<totalPages&&playersFound<playerConfigs.length){try{const response=await fetch(`https://fortniteapi.io/v1/events/window?windowId=${eventId}&page=${page}`,{headers:{'Authorization':API_KEY}});if(response.ok){const data=await response.json();console.log(`Réponse API page ${page}:`,data);if(data.result&&data.session&&data.session.results&&data.session.results.length>0){if(data.totalPages!==undefined){totalPages=data.totalPages;}for(let i=0;i<playerConfigs.length;i++){if(foundPlayers[i]===null){const config=playerConfigs[i];const teamData=data.session.results.find(team=>team.teamAccountIds&&team.teamAccountIds.includes(config.epic_id));if(teamData){const newPlayerData={playerName:config.display_player_name,rank:teamData.rank,points:teamData.pointsEarned,games:teamData.sessionHistory?teamData.sessionHistory.length:0};foundPlayers[i]=newPlayerData;playersFound++;console.log(`Joueur ${config.display_player_name} trouvé à la page ${page}, rang ${teamData.rank}`);updatePlayerDataIfChanged(newPlayerData,i);if(playersFound>=playerConfigs.length){console.log('Tous les joueurs trouvés, arrêt de la recherche.');return;}}}}}}else{console.error(`Erreur API page ${page}:`,response.status);}}catch(pageError){console.error(`Erreur lors du chargement de la page ${page}:`,pageError);}page++;}console.log(`Recherche terminée. ${playersFound}/${playerConfigs.length} joueurs trouvés après ${page} pages.`);};await searchAllPages();foundPlayers.forEach((player,index)=>{if(player){if(hasDataChanged(player,previousDataRef.current[index],index)){updatePlayerDataIfChanged(player,index);}}else{const emptyPlayerData={playerName:playerConfigs[index].display_player_name,rank:'-',points:'-',games:'-'};if(hasDataChanged(emptyPlayerData,previousDataRef.current[index],index)){updatePlayerDataIfChanged(emptyPlayerData,index);}}});setError(null);}catch(error){console.error('Error loading players data:',error);setError('Erreur lors du chargement des données: '+error.message);}};if(eventId){loadPlayersData();const interval=setInterval(loadPlayersData,60000);return()=>clearInterval(interval);}else{setError('ID de l\\'événement manquant');}},[eventId]);if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"gameward_overlay\",children:/*#__PURE__*/_jsx(\"div\",{className:\"error_container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"error_text\",children:error})})});}return/*#__PURE__*/_jsx(\"div\",{className:\"gameward_overlay\",children:playersData.map((playerData,index)=>{const config=playerConfigs[index];return/*#__PURE__*/_jsxs(\"div\",{className:\"player_stats_container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"player_name_linear\",children:playerData?playerData.playerName:config.display_player_name}),/*#__PURE__*/_jsxs(\"div\",{className:\"stats_display_linear\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat_item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat_label\",children:\"TOP\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat_value\",children:playerData?playerData.rank:'-'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat_item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat_label\",children:\"POINTS\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat_value\",children:playerData?playerData.points:'-'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat_item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat_label\",children:\"GAMES\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat_value\",children:playerData?playerData.games:'-'})]})]})]},index);})});}export default LeaderboardGamewardFortniteApi;","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","noeImage","iceeImage","laynImage","jsx","_jsx","jsxs","_jsxs","LeaderboardGamewardFortniteApi","eventId","URLSearchParams","search","get","API_KEY","process","env","REACT_APP_FORTNITE_API_KEY","playerConfigs","epic_id","display_player_name","avatar_image","playersData","setPlayersData","error","setError","previousDataRef","hasDataChanged","newData","oldData","index","rank","points","games","updatePlayerDataIfChanged","newPlayerData","current","prevData","updatedData","console","log","playerName","loadPlayersData","foundPlayers","Array","length","fill","searchAllPages","page","totalPages","playersFound","response","fetch","headers","ok","data","json","result","session","results","undefined","i","config","teamData","find","team","teamAccountIds","includes","pointsEarned","sessionHistory","status","pageError","forEach","player","emptyPlayerData","message","interval","setInterval","clearInterval","className","children","map","playerData"],"sources":["C:/Users/tommo/Documents/leaderboard gw/src/LeaderboardGameward-fortniteapi.io.js"],"sourcesContent":["import './LeaderboardGameward-fortniteapi.io.css';\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport noeImage from './noe.png';\r\nimport iceeImage from './icee.png';\r\nimport laynImage from './layn.png';\r\n\r\nfunction LeaderboardGamewardFortniteApi() {\r\n    const eventId = new URLSearchParams(useLocation().search).get('eventId');\r\n    const API_KEY = process.env.REACT_APP_FORTNITE_API_KEY;\r\n    \r\n    const playerConfigs = [\r\n        {\r\n            epic_id: \"70a8b05d217d47a381e9137b9a0dce51\",\r\n            display_player_name: \"Icee\",\r\n            avatar_image: iceeImage\r\n        },\r\n        {\r\n            epic_id: \"31d45164d7cc4c96bef16da56c2b5f8c\", \r\n            display_player_name: \"Noé\", \r\n            avatar_image: noeImage\r\n        },\r\n        {\r\n            epic_id: \"3ed9da5cff0948c98196c803412d6321\", \r\n            display_player_name: \"Layn\", \r\n            avatar_image: laynImage\r\n        }\r\n    ];\r\n\r\n    const [playersData, setPlayersData] = useState([null, null, null]);\r\n    const [error, setError] = useState(null);\r\n    const previousDataRef = useRef([null, null, null]);\r\n    \r\n\r\n    const hasDataChanged = (newData, oldData, index) => {\r\n        if (!newData && !oldData) return false;\r\n        if (!newData || !oldData) return true;\r\n        return newData.rank !== oldData.rank || \r\n               newData.points !== oldData.points || \r\n               newData.games !== oldData.games;\r\n    };\r\n    \r\n\r\n    const updatePlayerDataIfChanged = (newPlayerData, index) => {\r\n        if (hasDataChanged(newPlayerData, previousDataRef.current[index], index)) {\r\n            setPlayersData(prevData => {\r\n                const updatedData = [...prevData];\r\n                updatedData[index] = newPlayerData;\r\n                return updatedData;\r\n            });\r\n            previousDataRef.current[index] = newPlayerData;\r\n            console.log(`Données mises à jour pour ${newPlayerData.playerName}:`, newPlayerData);\r\n        } else {\r\n            console.log(`Aucun changement pour ${newPlayerData.playerName}`);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const loadPlayersData = async () => {\r\n            console.log('Chargement des données pour eventId:', eventId);\r\n            console.log('Configuration des joueurs:', playerConfigs);\r\n            try {\r\n                const foundPlayers = new Array(playerConfigs.length).fill(null);\r\n                \r\n\r\n                const searchAllPages = async () => {\r\n                    let page = 0;\r\n                    let totalPages = 1;\r\n                    let playersFound = 0;\r\n                    \r\n                    while (page < totalPages && playersFound < playerConfigs.length) {\r\n                        try {\r\n                            const response = await fetch(`https://fortniteapi.io/v1/events/window?windowId=${eventId}&page=${page}`, {\r\n                                headers: {\r\n                                    'Authorization': API_KEY\r\n                                }\r\n                            });\r\n                            \r\n                            if (response.ok) {\r\n                                const data = await response.json();\r\n                                console.log(`Réponse API page ${page}:`, data);\r\n                                \r\n                                if (data.result && data.session && data.session.results && data.session.results.length > 0) {\r\n\r\n                                    if (data.totalPages !== undefined) {\r\n                                        totalPages = data.totalPages;\r\n                                    }\r\n                                    \r\n\r\n                                    for (let i = 0; i < playerConfigs.length; i++) {\r\n                                        if (foundPlayers[i] === null) {\r\n                                            const config = playerConfigs[i];\r\n                                            const teamData = data.session.results.find(team => \r\n                                                team.teamAccountIds && team.teamAccountIds.includes(config.epic_id)\r\n                                            );\r\n                                            \r\n                                            if (teamData) {\r\n                                                const newPlayerData = {\r\n                                                    playerName: config.display_player_name,\r\n                                                    rank: teamData.rank,\r\n                                                    points: teamData.pointsEarned,\r\n                                                    games: teamData.sessionHistory ? teamData.sessionHistory.length : 0\r\n                                                };\r\n                                                foundPlayers[i] = newPlayerData;\r\n                                                playersFound++;\r\n                                                console.log(`Joueur ${config.display_player_name} trouvé à la page ${page}, rang ${teamData.rank}`);\r\n                                                \r\n\r\n                                                updatePlayerDataIfChanged(newPlayerData, i);\r\n                                                \r\n\r\n                                                if (playersFound >= playerConfigs.length) {\r\n                                                    console.log('Tous les joueurs trouvés, arrêt de la recherche.');\r\n                                                    return;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                console.error(`Erreur API page ${page}:`, response.status);\r\n                            }\r\n                        } catch (pageError) {\r\n                            console.error(`Erreur lors du chargement de la page ${page}:`, pageError);\r\n                        }\r\n                        \r\n                        page++;\r\n                    }\r\n                    \r\n                    console.log(`Recherche terminée. ${playersFound}/${playerConfigs.length} joueurs trouvés après ${page} pages.`);\r\n                };\r\n                \r\n                await searchAllPages();\r\n                \r\n\r\n                foundPlayers.forEach((player, index) => {\r\n                    if (player) {\r\n\r\n                        if (hasDataChanged(player, previousDataRef.current[index], index)) {\r\n                            updatePlayerDataIfChanged(player, index);\r\n                        }\r\n                    } else {\r\n\r\n                        const emptyPlayerData = {\r\n                            playerName: playerConfigs[index].display_player_name,\r\n                            rank: '-',\r\n                            points: '-',\r\n                            games: '-'\r\n                        };\r\n                        if (hasDataChanged(emptyPlayerData, previousDataRef.current[index], index)) {\r\n                            updatePlayerDataIfChanged(emptyPlayerData, index);\r\n                        }\r\n                    }\r\n                });\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('Error loading players data:', error);\r\n                setError('Erreur lors du chargement des données: ' + error.message);\r\n            }\r\n        };\r\n        \r\n        if (eventId) {\r\n            loadPlayersData();\r\n            const interval = setInterval(loadPlayersData, 60000); \r\n            return () => clearInterval(interval);\r\n        } else {\r\n            setError('ID de l\\'événement manquant');\r\n        }\r\n    }, [eventId]);\r\n\r\n\r\n\r\n\r\n    if (error) {\r\n        return (\r\n            <div className='gameward_overlay'>\r\n                <div className='error_container'>\r\n                    <div className='error_text'>{error}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='gameward_overlay'>\r\n\r\n            \r\n            {playersData.map((playerData, index) => {\r\n                const config = playerConfigs[index];\r\n                \r\n                return (\r\n                    <div key={index} className='player_stats_container'>\r\n                        <div className='player_name_linear'>\r\n                            {playerData ? playerData.playerName : config.display_player_name}\r\n                        </div>\r\n                        \r\n                        <div className='stats_display_linear'>\r\n                            <div className='stat_item'>\r\n                                <span className='stat_label'>TOP</span>\r\n                                <span className='stat_value'>\r\n                                    {playerData ? playerData.rank : '-'}\r\n                                </span>\r\n                            </div>\r\n                            \r\n                            <div className='stat_item'>\r\n                                <span className='stat_label'>POINTS</span>\r\n                                <span className='stat_value'>\r\n                                    {playerData ? playerData.points : '-'}\r\n                                </span>\r\n                            </div>\r\n                            \r\n                            <div className='stat_item'>\r\n                                <span className='stat_label'>GAMES</span>\r\n                                <span className='stat_value'>\r\n                                    {playerData ? playerData.games : '-'}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default LeaderboardGamewardFortniteApi;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}