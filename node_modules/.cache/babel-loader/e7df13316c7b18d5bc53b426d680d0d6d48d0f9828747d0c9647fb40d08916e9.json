{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tommo\\\\Documents\\\\leaderboard gw\\\\src\\\\LeaderboardGameward-fortniteapi.io.js\",\n  _s = $RefreshSig$();\nimport './LeaderboardGameward-fortniteapi.io.css';\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useLocation } from 'react-router-dom';\nimport noeImage from './noe.png';\nimport iceeImage from './icee.png';\nimport laynImage from './layn.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LeaderboardGamewardFortniteApi() {\n  _s();\n  const eventId = new URLSearchParams(useLocation().search).get('eventId');\n  const API_KEY = process.env.REACT_APP_FORTNITE_API_KEY;\n  const playerConfigs = [{\n    epic_id: \"70a8b05d217d47a381e9137b9a0dce51\",\n    display_player_name: \"Kurama\",\n    avatar_image: iceeImage\n  }, {\n    epic_id: \"31d45164d7cc4c96bef16da56c2b5f8c\",\n    display_player_name: \"Noé\",\n    avatar_image: noeImage\n  }, {\n    epic_id: \"3ed9da5cff0948c98196c803412d6321\",\n    display_player_name: \"Layn\",\n    avatar_image: laynImage\n  }];\n  const [playersData, setPlayersData] = useState([null, null, null]);\n  const [error, setError] = useState(null);\n  const previousDataRef = useRef([null, null, null]);\n  const hasDataChanged = (newData, oldData, index) => {\n    if (!newData && !oldData) return false;\n    if (!newData || !oldData) return true;\n    return newData.rank !== oldData.rank || newData.points !== oldData.points || newData.games !== oldData.games;\n  };\n  const updatePlayerDataIfChanged = (newPlayerData, index) => {\n    if (hasDataChanged(newPlayerData, previousDataRef.current[index], index)) {\n      setPlayersData(prevData => {\n        const updatedData = [...prevData];\n        updatedData[index] = newPlayerData;\n        return updatedData;\n      });\n      previousDataRef.current[index] = newPlayerData;\n      console.log(`Données mises à jour pour ${newPlayerData.playerName}:`, newPlayerData);\n    } else {\n      console.log(`Aucun changement pour ${newPlayerData.playerName}`);\n    }\n  };\n  useEffect(() => {\n    const loadPlayersData = async () => {\n      console.log('Chargement des données pour eventId:', eventId);\n      console.log('Configuration des joueurs:', playerConfigs);\n      try {\n        const foundPlayers = new Array(playerConfigs.length).fill(null);\n        const searchAllPages = async () => {\n          let page = 0;\n          let totalPages = 1;\n          let playersFound = 0;\n          while (page < totalPages && playersFound < playerConfigs.length) {\n            try {\n              const response = await fetch(`https://fortniteapi.io/v1/events/window?windowId=${eventId}&page=${page}`, {\n                headers: {\n                  'Authorization': API_KEY\n                }\n              });\n              if (response.ok) {\n                const data = await response.json();\n                console.log(`Réponse API page ${page}:`, data);\n                if (data.result && data.session && data.session.results && data.session.results.length > 0) {\n                  if (data.totalPages !== undefined) {\n                    totalPages = data.totalPages;\n                  }\n                  for (let i = 0; i < playerConfigs.length; i++) {\n                    if (foundPlayers[i] === null) {\n                      const config = playerConfigs[i];\n                      const teamData = data.session.results.find(team => team.teamAccountIds && team.teamAccountIds.includes(config.epic_id));\n                      if (teamData) {\n                        const newPlayerData = {\n                          playerName: config.display_player_name,\n                          rank: teamData.rank,\n                          points: teamData.pointsEarned,\n                          games: teamData.sessionHistory ? teamData.sessionHistory.length : 0\n                        };\n                        foundPlayers[i] = newPlayerData;\n                        playersFound++;\n                        console.log(`Joueur ${config.display_player_name} trouvé à la page ${page}, rang ${teamData.rank}`);\n                        updatePlayerDataIfChanged(newPlayerData, i);\n                        if (playersFound >= playerConfigs.length) {\n                          console.log('Tous les joueurs trouvés, arrêt de la recherche.');\n                          return;\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                console.error(`Erreur API page ${page}:`, response.status);\n              }\n            } catch (pageError) {\n              console.error(`Erreur lors du chargement de la page ${page}:`, pageError);\n            }\n            page++;\n          }\n          console.log(`Recherche terminée. ${playersFound}/${playerConfigs.length} joueurs trouvés après ${page} pages.`);\n        };\n        await searchAllPages();\n        foundPlayers.forEach((player, index) => {\n          if (player) {\n            if (hasDataChanged(player, previousDataRef.current[index], index)) {\n              updatePlayerDataIfChanged(player, index);\n            }\n          } else {\n            const emptyPlayerData = {\n              playerName: playerConfigs[index].display_player_name,\n              rank: '-',\n              points: '-',\n              games: '-'\n            };\n            if (hasDataChanged(emptyPlayerData, previousDataRef.current[index], index)) {\n              updatePlayerDataIfChanged(emptyPlayerData, index);\n            }\n          }\n        });\n        setError(null);\n      } catch (error) {\n        console.error('Error loading players data:', error);\n        setError('Erreur lors du chargement des données: ' + error.message);\n      }\n    };\n    if (eventId) {\n      loadPlayersData();\n      const interval = setInterval(loadPlayersData, 60000);\n      return () => clearInterval(interval);\n    } else {\n      setError('ID de l\\'événement manquant');\n    }\n  }, [eventId]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameward_overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error_container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error_text\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameward_overlay\",\n    children: playersData.map((playerData, index) => {\n      const config = playerConfigs[index];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player_stats_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player_name_linear\",\n          children: playerData ? playerData.playerName : config.display_player_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats_display_linear\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat_item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat_label\",\n              children: \"TOP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat_value\",\n              children: playerData ? playerData.rank : '-'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat_item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat_label\",\n              children: \"POINTS\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat_value\",\n              children: playerData ? playerData.points : '-'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat_item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat_label\",\n              children: \"GAMES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"stat_value\",\n              children: playerData ? playerData.games : '-'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n}\n_s(LeaderboardGamewardFortniteApi, \"e1TWya6FAGrkWy9zD9VF2r77Cxs=\", false, function () {\n  return [useLocation];\n});\n_c = LeaderboardGamewardFortniteApi;\nexport default LeaderboardGamewardFortniteApi;\nvar _c;\n$RefreshReg$(_c, \"LeaderboardGamewardFortniteApi\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","noeImage","iceeImage","laynImage","jsxDEV","_jsxDEV","LeaderboardGamewardFortniteApi","_s","eventId","URLSearchParams","search","get","API_KEY","process","env","REACT_APP_FORTNITE_API_KEY","playerConfigs","epic_id","display_player_name","avatar_image","playersData","setPlayersData","error","setError","previousDataRef","hasDataChanged","newData","oldData","index","rank","points","games","updatePlayerDataIfChanged","newPlayerData","current","prevData","updatedData","console","log","playerName","loadPlayersData","foundPlayers","Array","length","fill","searchAllPages","page","totalPages","playersFound","response","fetch","headers","ok","data","json","result","session","results","undefined","i","config","teamData","find","team","teamAccountIds","includes","pointsEarned","sessionHistory","status","pageError","forEach","player","emptyPlayerData","message","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","playerData","_c","$RefreshReg$"],"sources":["C:/Users/tommo/Documents/leaderboard gw/src/LeaderboardGameward-fortniteapi.io.js"],"sourcesContent":["import './LeaderboardGameward-fortniteapi.io.css';\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport noeImage from './noe.png';\r\nimport iceeImage from './icee.png';\r\nimport laynImage from './layn.png';\r\n\r\nfunction LeaderboardGamewardFortniteApi() {\r\n    const eventId = new URLSearchParams(useLocation().search).get('eventId');\r\n    const API_KEY = process.env.REACT_APP_FORTNITE_API_KEY;\r\n    \r\n    const playerConfigs = [\r\n        {\r\n            epic_id: \"70a8b05d217d47a381e9137b9a0dce51\",\r\n            display_player_name: \"Kurama\",\r\n            avatar_image: iceeImage\r\n        },\r\n        {\r\n            epic_id: \"31d45164d7cc4c96bef16da56c2b5f8c\", \r\n            display_player_name: \"Noé\", \r\n            avatar_image: noeImage\r\n        },\r\n        {\r\n            epic_id: \"3ed9da5cff0948c98196c803412d6321\", \r\n            display_player_name: \"Layn\", \r\n            avatar_image: laynImage\r\n        }\r\n    ];\r\n\r\n    const [playersData, setPlayersData] = useState([null, null, null]);\r\n    const [error, setError] = useState(null);\r\n    const previousDataRef = useRef([null, null, null]);\r\n    \r\n\r\n    const hasDataChanged = (newData, oldData, index) => {\r\n        if (!newData && !oldData) return false;\r\n        if (!newData || !oldData) return true;\r\n        return newData.rank !== oldData.rank || \r\n               newData.points !== oldData.points || \r\n               newData.games !== oldData.games;\r\n    };\r\n    \r\n\r\n    const updatePlayerDataIfChanged = (newPlayerData, index) => {\r\n        if (hasDataChanged(newPlayerData, previousDataRef.current[index], index)) {\r\n            setPlayersData(prevData => {\r\n                const updatedData = [...prevData];\r\n                updatedData[index] = newPlayerData;\r\n                return updatedData;\r\n            });\r\n            previousDataRef.current[index] = newPlayerData;\r\n            console.log(`Données mises à jour pour ${newPlayerData.playerName}:`, newPlayerData);\r\n        } else {\r\n            console.log(`Aucun changement pour ${newPlayerData.playerName}`);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const loadPlayersData = async () => {\r\n            console.log('Chargement des données pour eventId:', eventId);\r\n            console.log('Configuration des joueurs:', playerConfigs);\r\n            try {\r\n                const foundPlayers = new Array(playerConfigs.length).fill(null);\r\n                \r\n\r\n                const searchAllPages = async () => {\r\n                    let page = 0;\r\n                    let totalPages = 1;\r\n                    let playersFound = 0;\r\n                    \r\n                    while (page < totalPages && playersFound < playerConfigs.length) {\r\n                        try {\r\n                            const response = await fetch(`https://fortniteapi.io/v1/events/window?windowId=${eventId}&page=${page}`, {\r\n                                headers: {\r\n                                    'Authorization': API_KEY\r\n                                }\r\n                            });\r\n                            \r\n                            if (response.ok) {\r\n                                const data = await response.json();\r\n                                console.log(`Réponse API page ${page}:`, data);\r\n                                \r\n                                if (data.result && data.session && data.session.results && data.session.results.length > 0) {\r\n\r\n                                    if (data.totalPages !== undefined) {\r\n                                        totalPages = data.totalPages;\r\n                                    }\r\n                                    \r\n\r\n                                    for (let i = 0; i < playerConfigs.length; i++) {\r\n                                        if (foundPlayers[i] === null) {\r\n                                            const config = playerConfigs[i];\r\n                                            const teamData = data.session.results.find(team => \r\n                                                team.teamAccountIds && team.teamAccountIds.includes(config.epic_id)\r\n                                            );\r\n                                            \r\n                                            if (teamData) {\r\n                                                const newPlayerData = {\r\n                                                    playerName: config.display_player_name,\r\n                                                    rank: teamData.rank,\r\n                                                    points: teamData.pointsEarned,\r\n                                                    games: teamData.sessionHistory ? teamData.sessionHistory.length : 0\r\n                                                };\r\n                                                foundPlayers[i] = newPlayerData;\r\n                                                playersFound++;\r\n                                                console.log(`Joueur ${config.display_player_name} trouvé à la page ${page}, rang ${teamData.rank}`);\r\n                                                \r\n\r\n                                                updatePlayerDataIfChanged(newPlayerData, i);\r\n                                                \r\n\r\n                                                if (playersFound >= playerConfigs.length) {\r\n                                                    console.log('Tous les joueurs trouvés, arrêt de la recherche.');\r\n                                                    return;\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                console.error(`Erreur API page ${page}:`, response.status);\r\n                            }\r\n                        } catch (pageError) {\r\n                            console.error(`Erreur lors du chargement de la page ${page}:`, pageError);\r\n                        }\r\n                        \r\n                        page++;\r\n                    }\r\n                    \r\n                    console.log(`Recherche terminée. ${playersFound}/${playerConfigs.length} joueurs trouvés après ${page} pages.`);\r\n                };\r\n                \r\n                await searchAllPages();\r\n                \r\n\r\n                foundPlayers.forEach((player, index) => {\r\n                    if (player) {\r\n\r\n                        if (hasDataChanged(player, previousDataRef.current[index], index)) {\r\n                            updatePlayerDataIfChanged(player, index);\r\n                        }\r\n                    } else {\r\n\r\n                        const emptyPlayerData = {\r\n                            playerName: playerConfigs[index].display_player_name,\r\n                            rank: '-',\r\n                            points: '-',\r\n                            games: '-'\r\n                        };\r\n                        if (hasDataChanged(emptyPlayerData, previousDataRef.current[index], index)) {\r\n                            updatePlayerDataIfChanged(emptyPlayerData, index);\r\n                        }\r\n                    }\r\n                });\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('Error loading players data:', error);\r\n                setError('Erreur lors du chargement des données: ' + error.message);\r\n            }\r\n        };\r\n        \r\n        if (eventId) {\r\n            loadPlayersData();\r\n            const interval = setInterval(loadPlayersData, 60000); \r\n            return () => clearInterval(interval);\r\n        } else {\r\n            setError('ID de l\\'événement manquant');\r\n        }\r\n    }, [eventId]);\r\n\r\n\r\n\r\n\r\n    if (error) {\r\n        return (\r\n            <div className='gameward_overlay'>\r\n                <div className='error_container'>\r\n                    <div className='error_text'>{error}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className='gameward_overlay'>\r\n\r\n            \r\n            {playersData.map((playerData, index) => {\r\n                const config = playerConfigs[index];\r\n                \r\n                return (\r\n                    <div key={index} className='player_stats_container'>\r\n                        <div className='player_name_linear'>\r\n                            {playerData ? playerData.playerName : config.display_player_name}\r\n                        </div>\r\n                        \r\n                        <div className='stats_display_linear'>\r\n                            <div className='stat_item'>\r\n                                <span className='stat_label'>TOP</span>\r\n                                <span className='stat_value'>\r\n                                    {playerData ? playerData.rank : '-'}\r\n                                </span>\r\n                            </div>\r\n                            \r\n                            <div className='stat_item'>\r\n                                <span className='stat_label'>POINTS</span>\r\n                                <span className='stat_value'>\r\n                                    {playerData ? playerData.points : '-'}\r\n                                </span>\r\n                            </div>\r\n                            \r\n                            <div className='stat_item'>\r\n                                <span className='stat_label'>GAMES</span>\r\n                                <span className='stat_value'>\r\n                                    {playerData ? playerData.games : '-'}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default LeaderboardGamewardFortniteApi;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}